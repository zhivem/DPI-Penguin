import logging
import os
import subprocess
import sys
from typing import Optional, Any

from PyQt6.QtCore import pyqtSignal, pyqtSlot
from PyQt6.QtWidgets import (
    QDialog, QHBoxLayout, QMessageBox, QVBoxLayout
)

from qfluentwidgets import PushButton, TextEdit

from utils.utils import tr, settings, BASE_FOLDER
from utils.update_utils import UpdateChecker
from utils import theme_utils

class SettingsDialog(QDialog):
    config_updated_signal = pyqtSignal()

    def __init__(self, parent: Optional[Any] = None):
        super().__init__(parent)
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")

        self.setWindowTitle(tr("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"))
        self.setFixedSize(500, 400)

        saved_theme = settings.value("theme", "light")  
        theme_utils.apply_theme(self, saved_theme, settings, BASE_FOLDER) 

        self.text_edit = TextEdit(self)
        self.text_edit.setReadOnly(True)
        self.text_edit.setPlaceholderText(tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–¥–µ—Å—å..."))

        self.update_button = PushButton(tr("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"), self)
        self.update_button.clicked.connect(self.on_update)

        self.close_button = PushButton(tr("–ó–∞–∫—Ä—ã—Ç—å"), self)
        self.close_button.clicked.connect(self.close)

        button_layout = QHBoxLayout()
        button_layout.addWidget(self.update_button)
        button_layout.addWidget(self.close_button)

        main_layout = QVBoxLayout(self)
        main_layout.addWidget(self.text_edit)
        main_layout.addLayout(button_layout)
        self.setLayout(main_layout)

        self.initial_check_done = False
        self.update_checker = UpdateChecker()
        self.update_checker.get_local_versions()
        self.update_checker.get_remote_versions()
        self.update_checker.config_updated_signal.connect(self.on_config_updated)

        self.check_for_updates()

    @pyqtSlot()
    def on_update(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        self.logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'")
        try:
            for component in ('zapret', 'config'):
                self.update_component(component)

            self.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            QMessageBox.information(self, tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"), tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"))
            self.close_and_open_main_window()

        except Exception as e:
            self.logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            QMessageBox.critical(self, tr("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"), tr(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"))
            self.close_and_open_main_window()

    def update_component(self, component: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
        self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component}'")
        if self.update_checker.is_update_available(component):
            self.logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è '{component}', –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É")
            if not self.update_checker.download_and_update(component, dialog=self):
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å '{component}'"
                self.logger.error(error_msg)
                raise Exception(error_msg)
            self.logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")

    def check_for_updates(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        self.text_edit.clear()

        if not self.initial_check_done:
            if self.update_checker.is_update_available('ver_programm'):
                self.logger.info("–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                self.text_edit.append(tr('üîÑ –î–æ—Å—Ç—É–ø–Ω–∞ <span style="color: red;">–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è</span> –ø—Ä–æ–≥—Ä–∞–º–º—ã'))
                self.add_download_button()
            else:
                self.logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                self.text_edit.append(tr("‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"))
            self.initial_check_done = True

        self.update_message('zapret', 'Zapret', 'üîÑ –î–æ—Å—Ç—É–ø–Ω–æ <span style="color: red;">–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span> Zapret', "‚úÖ –í–µ—Ä—Å–∏—è Zapret –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        self.update_message('config', 'default.ini', 'üîÑ –î–æ—Å—Ç—É–ø–Ω–æ <span style="color: red;">–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span> –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞', "‚úÖ –í–µ—Ä—Å–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")

        self.update_button.setEnabled(
            self.update_checker.is_update_available('zapret') or
            self.update_checker.is_update_available('config')
        )

    def update_message(self, component: str, keyword: str, update_message: str, current_message: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ text_edit –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞."""
        message = update_message if self.update_checker.is_update_available(component) else current_message
        self.replace_message_in_text_edit(keyword, message)

    def replace_message_in_text_edit(self, keyword: str, new_message: str) -> None:
        """–ó–∞–º–µ–Ω—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ text_edit –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
        document = self.text_edit.document()
        found = False
        for i in range(document.blockCount()):
            block = document.findBlockByNumber(i)
            if keyword.lower() in block.text().lower():
                cursor = self.text_edit.textCursor()
                cursor.setPosition(block.position())
                cursor.movePosition(cursor.MoveOperation.EndOfBlock, cursor.MoveMode.KeepAnchor)
                cursor.removeSelectedText()
                cursor.insertHtml(new_message)
                found = True
                break
        if not found:
            self.text_edit.append(new_message)

    def add_download_button(self) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç."""
        if not hasattr(self, 'download_button'):
            self.logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É'")
            self.download_button = PushButton(tr("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"), self)
            self.download_button.clicked.connect(self.open_download_site)
            self.layout().addWidget(self.download_button)

    def open_download_site(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
        self.logger.info("–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        try:
            if getattr(sys, 'frozen', False):
                base_path = os.path.dirname(sys.executable)
            else:
                base_path = os.path.dirname(os.path.abspath(__file__))

            updater_exe = os.path.join(base_path, 'loader.exe')
            if not os.path.exists(updater_exe):
                self.logger.error(f"–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {updater_exe}")
                QMessageBox.critical(self, tr("–û—à–∏–±–∫–∞"), tr("–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                return

            self.logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {updater_exe}")
            subprocess.Popen([updater_exe], shell=True)
            self.close_and_open_main_window()

        except Exception as e:
            self.logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {e}")
            QMessageBox.critical(self, tr("–û—à–∏–±–∫–∞"), tr(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {e}"))

    def close_and_open_main_window(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞")
        self.close()
        if self.parent():
            self.parent().show()
        else:
            from gui.gui import DPIPenguin
            self.main_window = DPIPenguin()
            self.main_window.show()

    @pyqtSlot()
    def on_config_updated(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")