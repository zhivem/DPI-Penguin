import logging
import os
import zipfile

import psutil
import requests
import win32service
import win32serviceutil
import winerror
from PyQt6.QtCore import pyqtSignal, pyqtSlot
from PyQt6.QtWidgets import (
    QDialog,
    QHBoxLayout,
    QMessageBox,
    QVBoxLayout,
)
from qfluentwidgets import PushButton, TextEdit

from utils.update_checker import UpdateChecker
from utils.utils import BASE_FOLDER, tr


class SettingsDialog(QDialog):
    config_updated_signal = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(tr("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫"))
        self.setFixedSize(500, 400)
        self.logger = logging.getLogger(self.__class__.__name__)
        layout = QVBoxLayout()
        self.text_edit = TextEdit(self)
        self.text_edit.setReadOnly(True)
        self.text_edit.setPlaceholderText(tr("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∑–¥–µ—Å—å..."))
        layout.addWidget(self.text_edit)
        button_layout = QHBoxLayout()
        self.update_button = PushButton(tr("–û–±–Ω–æ–≤–∏—Ç—å"), self)
        self.update_button.clicked.connect(self.on_update)
        button_layout.addWidget(self.update_button)
        self.close_button = PushButton(tr("–ó–∞–∫—Ä—ã—Ç—å"), self)
        self.close_button.clicked.connect(self.close)
        button_layout.addWidget(self.close_button)
        layout.addLayout(button_layout)
        self.setLayout(layout)
        self.initial_check_done = False
        self.check_for_updates()

    @pyqtSlot()
    def on_update(self):
        try:
            if self.zapret_update_available:
                self.update_zapret()
            if self.config_update_available:
                self.update_default_ini()
            self.logger.info(tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"))
            self.check_for_updates()
            QMessageBox.information(self, tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"), tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"))
        except Exception as e:
            error_message = f"{tr('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')}: {e}"
            self.logger.error(error_message)
            QMessageBox.critical(self, tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"), error_message)

    def check_for_updates(self):
        self.text_edit.clear()
        update_checker = UpdateChecker()
        update_checker.get_local_versions()
        update_checker.get_remote_versions()

        if not self.initial_check_done:
            self.text_edit.clear()
            if update_checker.is_update_available('ver_programm'):
                self.text_edit.append(tr("üîÑ –î–æ—Å—Ç—É–ø–Ω–∞ <span style=\"color: red;\">–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è</span> –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏"))
                self.add_download_button()
            else:
                self.text_edit.append(tr("‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"))
            self.initial_check_done = True

        self.zapret_update_available = update_checker.is_update_available('zapret')
        if self.zapret_update_available:
            self.update_zapret_message(tr('üîÑ –î–æ—Å—Ç—É–ø–Ω–æ <span style=\"color: red;\">–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span> Zapret'))
        else:
            self.update_zapret_message(tr("‚úÖ –í–µ—Ä—Å–∏—è Zapret –∞–∫—Ç—É–∞–ª—å–Ω–∞"))

        self.config_update_available = update_checker.is_update_available('config')
        if self.config_update_available:
            self.update_config_message(tr('üîÑ –î–æ—Å—Ç—É–ø–Ω–æ <span style=\"color: red;\">–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span> –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'))
        else:
            self.update_config_message(tr("‚úÖ –í–µ—Ä—Å–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞"))

        if self.zapret_update_available or self.config_update_available:
            self.update_button.setEnabled(True)
        else:
            self.update_button.setEnabled(False)

    def update_zapret_message(self, message):
        self.replace_message_in_text_edit("Zapret", message)

    def update_config_message(self, message):
        self.replace_message_in_text_edit("default.ini", message)

    def replace_message_in_text_edit(self, keyword, new_message):
        document = self.text_edit.document()
        found = False
        for i in range(document.blockCount()):
            block = document.findBlockByNumber(i)
            text = block.text()
            if keyword.lower() in text.lower():
                cursor = self.text_edit.textCursor()
                cursor.setPosition(block.position())
                cursor.movePosition(cursor.MoveOperation.EndOfBlock, cursor.MoveMode.KeepAnchor)
                cursor.removeSelectedText()
                cursor.insertText(new_message)
                found = True
                break
        if not found:
            self.text_edit.append(new_message)

    def add_download_button(self):
        if not hasattr(self, 'download_button'):
            self.download_button = PushButton(tr("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∑–∞–≥—Ä—É–∑–∫–∏"), self)
            self.download_button.clicked.connect(self.open_download_site)
            self.layout().addWidget(self.download_button)

    def open_download_site(self):
        import webbrowser
        download_url = "https://github.com/zhivem/DPI-Penguin/releases"
        webbrowser.open(download_url)

    def update_zapret(self):
        self.logger.info(tr("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ zapret..."))
        self.terminate_process("winws.exe")
        self.stop_service("WinDivert")
        try:
            zip_url = "https://github.com/zhivem/DPI-Penguin/raw/refs/heads/main/zapret/zapret.zip"
            self.logger.info(tr("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å GitHub..."))
            response = requests.get(zip_url, stream=True)
            if response.status_code == 200:
                zip_path = os.path.join(BASE_FOLDER, "update_temp.zip")
                with open(zip_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                self.logger.info(tr("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."))
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(BASE_FOLDER)
                os.remove(zip_path)
                self.logger.info(tr("–§–∞–π–ª—ã zapret —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."))
                self.update_local_version_file()
            else:
                self.logger.warning(tr(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}"))
                raise Exception(tr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
        except Exception as e:
            self.logger.error(tr(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ zapret: {e}"))
            raise e

    def update_default_ini(self):
        self.logger.info(tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ default.ini..."))
        try:
            default_ini_url = "https://raw.githubusercontent.com/zhivem/DPI-Penguin/main/config/default.ini"
            response = requests.get(default_ini_url)
            if response.status_code == 200:
                config_dir = os.path.join(BASE_FOLDER, "config")
                os.makedirs(config_dir, exist_ok=True)
                local_default_ini = os.path.join(config_dir, "default.ini")
                with open(local_default_ini, "w", encoding='utf-8') as f:
                    f.write(response.text)
                self.logger.info(tr("default.ini –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ."))
                self.update_local_version_file()
                self.config_updated_signal.emit()
            else:
                self.logger.warning(tr(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å default.ini. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}"))
                raise Exception(tr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å default.ini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
        except Exception as e:
            self.logger.error(tr(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ default.ini: {e}"))
            raise e

    def update_local_version_file(self):
        self.logger.info(tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ version_zapret.ini..."))
        try:
            version_url = "https://raw.githubusercontent.com/zhivem/DPI-Penguin/refs/heads/main/setting_version/version_config.ini"
            response = requests.get(version_url)
            if response.status_code == 200:
                version_dir = os.path.join(BASE_FOLDER, "setting_version")
                os.makedirs(version_dir, exist_ok=True)
                local_version_file = os.path.join(version_dir, "version_config.ini")
                with open(local_version_file, "w", encoding='utf-8') as f:
                    f.write(response.text)
                self.logger.info(tr("–õ–æ–∫–∞–ª—å–Ω—ã–π version_config.ini —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω."))
            else:
                self.logger.warning(tr(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å version_config.ini. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}"))
        except Exception as e:
            self.logger.error(tr(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ version_zapret.ini: {e}"))
            raise e

    def terminate_process(self, process_name):
        process_found = False
        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'].lower() == process_name.lower():
                process_found = True
                try:
                    proc.terminate()
                    proc.wait(timeout=5)
                    self.logger.info(tr(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω."))
                except Exception as e:
                    self.logger.error(tr(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_name}: {e}"))
                    raise e
        if not process_found:
            self.logger.info(tr(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."))

    def stop_service(self, service_name):
        try:
            service_status = win32serviceutil.QueryServiceStatus(service_name)
            if service_status[1] == win32service.SERVICE_RUNNING:
                win32serviceutil.StopService(service_name)
                self.logger.info(tr(f"–°–ª—É–∂–±–∞ {service_name} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."))
            else:
                self.logger.info(tr(f"–°–ª—É–∂–±–∞ {service_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞."))
        except Exception as e:
            if hasattr(e, 'winerror') and e.winerror == winerror.ERROR_SERVICE_DOES_NOT_EXIST:
                self.logger.warning(tr(f"–°–ª—É–∂–±–∞ {service_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."))
            else:
                self.logger.error(tr(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–ª—É–∂–±—ã {service_name}: {e}"))
                raise e
