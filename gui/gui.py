import logging
import os
import subprocess
import platform
import configparser

import psutil
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSettings, Qt, pyqtSignal, pyqtSlot
from PyQt5.QtGui import QColor, QIcon, QPixmap
from PyQt5.QtWidgets import (
    QAction,
    QCheckBox,
    QGroupBox,
    QMenu,
    QSystemTrayIcon,
    QMessageBox,
    QListWidget,
    QListWidgetItem,
    QFileDialog,
)
from qfluentwidgets import ComboBox as QFComboBox, PushButton, TextEdit

from workers.process_worker import WorkerThread
from workers.site_checker import SiteCheckerWorker
from utils.updater import Updater
from utils.utils import (
    BASE_FOLDER,
    BLACKLIST_FILES,
    DISPLAY_NAMES,
    GOODBYE_DPI_PROCESS_NAME,
    WIN_DIVERT_COMMAND,
    CURRENT_VERSION,
    create_service,
    delete_service,
    disable_autostart,
    enable_autostart,
    is_autostart_enabled,
    load_script_options,
)
import utils.theme_utils

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π –∫ –∏–∫–æ–Ω–∫–∞–º
TRAY_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "newicon.ico")
THEME_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "themes.png")
LOG_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "log.png")
INI_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "ini.png")

class GoodbyeDPIApp(QtWidgets.QWidget):
    site_status_updated = pyqtSignal(str, str)
    sites_check_finished = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(self.__class__.__name__)

        self.settings = QSettings("Zhivem", "GoodbyeDPIApp")
        self.ensure_logs_folder_exists()

        # –ó–∞–≥—Ä—É–∑–∫–∞ SCRIPT_OPTIONS —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        self.script_options, self.config_error = load_script_options(
            os.path.join(BASE_FOLDER, "config", "default.ini")
        )
        self.current_config_path = os.path.join(BASE_FOLDER, "config", "default.ini")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.init_ui()

        self.updater = Updater()

        self.init_tray_icon()
        self.connect_signals()

        self.minimize_to_tray = True

        if self.config_error:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º –≤—ã–≤–æ–¥–µ
            self.console_output.append(self.config_error)
            self.logger.error(self.config_error)
            # –û—Ç–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
            self.selected_script.setEnabled(False)
            self.run_button.setEnabled(False)
            self.stop_close_button.setEnabled(False)
            self.update_config_button.setEnabled(False)  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

        QtCore.QTimer.singleShot(0, self.check_sites_status)

    def ensure_logs_folder_exists(self):
        logs_folder = os.path.join(BASE_FOLDER, "logs")
        if not os.path.exists(logs_folder):
            try:
                os.makedirs(logs_folder)
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ logs: {logs_folder}")
            except Exception as e:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É logs: {e}", exc_info=True)

    def init_ui(self):
        self.setWindowTitle(f"DPI Penguin v{CURRENT_VERSION}")
        self.setFixedSize(420, 585)
        self.set_window_icon(TRAY_ICON_PATH)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        saved_theme = self.settings.value("theme", "light")
        utils.theme_utils.apply_theme(self, saved_theme, self.settings, BASE_FOLDER)

        layout = QtWidgets.QVBoxLayout(self)
        tab_widget = self.create_tabs()
        layout.addWidget(tab_widget)

    def set_window_icon(self, icon_path):
        if not os.path.exists(icon_path):
            self.logger.error(f"–§–∞–π–ª –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {icon_path}")
        self.setWindowIcon(QIcon(icon_path))

    def init_tray_icon(self):
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(QIcon(TRAY_ICON_PATH))

        tray_menu = QMenu()

        restore_action = QAction("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", self)
        restore_action.triggered.connect(self.restore_from_tray)
        tray_menu.addAction(restore_action)

        quit_action = QAction("–í—ã—Ö–æ–¥", self)
        quit_action.triggered.connect(self.exit_app)
        tray_menu.addAction(quit_action)

        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.activated.connect(self.on_tray_icon_activated)

    def connect_signals(self):
        self.site_status_updated.connect(self.update_site_status)
        self.sites_check_finished.connect(self.finish_check_sites)

    def closeEvent(self, event):
        if self.minimize_to_tray:
            event.ignore()
            self.hide()
            self.tray_icon.show()
            self.tray_icon.showMessage(
                "DPI Penguin by Zhivem",
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π. –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ.",
                QSystemTrayIcon.Information,
                1000
            )
        else:
            event.accept()

    def restore_from_tray(self):
        self.show()
        self.tray_icon.hide()

    def on_tray_icon_activated(self, reason):
        if reason == QSystemTrayIcon.Trigger:
            if self.isHidden():
                self.restore_from_tray()
            else:
                self.hide()
                self.tray_icon.show()
                self.tray_icon.showMessage(
                    "DPI Penguin by Zhivem",
                    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π. –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ.",
                    QSystemTrayIcon.Information,
                    1000
                )

    def exit_app(self):
        self.tray_icon.hide()
        self.stop_and_close()
        QtWidgets.QApplication.quit()

    def create_tabs(self):
        tab_widget = QtWidgets.QTabWidget(self)
        tab_widget.addTab(self.create_process_tab(), "–û—Å–Ω–æ–≤–Ω–æ–µ")
        tab_widget.addTab(self.create_settings_tab(), "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        tab_widget.addTab(self.create_info_tab(), "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        return tab_widget

    def create_process_tab(self):
        process_tab = QtWidgets.QWidget()
        process_layout = QtWidgets.QVBoxLayout(process_tab)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞ –∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        script_layout = QtWidgets.QHBoxLayout()

        # –í—ã–±–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞
        self.selected_script = QFComboBox()
        if not self.config_error:
            self.selected_script.addItems(self.script_options.keys())
        self.selected_script.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        script_layout.addWidget(self.selected_script)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        self.update_config_button = PushButton("üìÅ", self)
        self.update_config_button.setToolTip("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        self.update_config_button.clicked.connect(self.load_config_via_dialog)
        self.update_config_button.setSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        self.update_config_button.setFixedWidth(40)
        script_layout.addWidget(self.update_config_button)

        script_layout.setStretch(0, 1)  # QFComboBox
        script_layout.setStretch(1, 0)  # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏

        process_layout.addLayout(script_layout)

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        buttons_layout = QtWidgets.QHBoxLayout()
        self.run_button = self.create_button("–ó–∞–ø—É—Å—Ç–∏—Ç—å", self.run_exe, buttons_layout)
        self.stop_close_button = self.create_button(
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å",
            self.stop_and_close,
            buttons_layout,
            enabled=False
        )
        process_layout.addLayout(buttons_layout)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.console_output = TextEdit(self)
        self.console_output.setReadOnly(True)
        process_layout.addWidget(self.console_output)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–æ–≥–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        log_and_config_layout = QtWidgets.QHBoxLayout()

        self.open_logs_button = self.create_button(
            text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É Log",
            func=lambda: self.open_path(os.path.join(BASE_FOLDER, "logs")),
            layout=None,
            icon_path=LOG_ICON_PATH,
            icon_size=(16, 16),
            tooltip="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ª–æ–≥–æ–≤"
        )
        log_and_config_layout.addWidget(self.open_logs_button)

        self.open_config_button = self.create_button(
            text="–û—Ç–∫—Ä—ã—Ç—å configs",
            func=lambda: self.open_path(os.path.join(BASE_FOLDER, "config")),
            layout=None,
            icon_path=INI_ICON_PATH,
            icon_size=(16, 16),
            tooltip="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
        )
        log_and_config_layout.addWidget(self.open_config_button)

        process_layout.addLayout(log_and_config_layout)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.theme_toggle_button = PushButton()
        utils.theme_utils.update_theme_button_text(self, self.settings)
        self.set_button_icon(self.theme_toggle_button, THEME_ICON_PATH, (16, 16))
        self.theme_toggle_button.clicked.connect(self.toggle_theme_button_clicked)
        process_layout.addWidget(self.theme_toggle_button)

        return process_tab

    def set_button_icon(self, button, icon_path, icon_size):
        if not os.path.exists(icon_path):
            self.logger.error(f"–§–∞–π–ª –∏–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {icon_path}")
        else:
            icon = QIcon(icon_path)
            button.setIcon(icon)
            button.setIconSize(QtCore.QSize(*icon_size))

    def toggle_theme_button_clicked(self):
        utils.theme_utils.toggle_theme(self, self.settings, BASE_FOLDER)

    def create_settings_tab(self):
        settings_tab = QtWidgets.QWidget()
        settings_layout = QtWidgets.QVBoxLayout(settings_tab)

        # –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        autostart_group = QGroupBox("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫")
        autostart_layout = QtWidgets.QVBoxLayout()
        autostart_group.setLayout(autostart_layout)

        self.tray_checkbox = QCheckBox("–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.tray_checkbox.setChecked(True)
        self.tray_checkbox.stateChanged.connect(self.toggle_tray_behavior)
        autostart_layout.addWidget(self.tray_checkbox)

        self.autostart_checkbox = QCheckBox("–ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã")
        self.autostart_checkbox.setChecked(is_autostart_enabled())
        self.autostart_checkbox.stateChanged.connect(self.toggle_autostart)
        autostart_layout.addWidget(self.autostart_checkbox)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
        font = self.tray_checkbox.font()
        font.setPointSize(9)
        self.tray_checkbox.setFont(font)
        self.autostart_checkbox.setFont(font)

        settings_layout.addWidget(autostart_group)

        # –ì—Ä—É–ø–ø–∞ —Å–ª—É–∂–±
        services_group = QGroupBox("–°–ª—É–∂–±—ã")
        services_layout = QtWidgets.QVBoxLayout()
        services_group.setLayout(services_layout)

        self.create_button("–°–æ–∑–¥–∞—Ç—å —Å–ª—É–∂–±—É", self.handle_create_service, services_layout)
        self.create_button("–£–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–±—É", self.handle_delete_service, services_layout)

        settings_layout.addWidget(services_group)

        # –ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        updates_group = QGroupBox("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        updates_layout = QtWidgets.QVBoxLayout()
        updates_group.setLayout(updates_layout)
        self.create_button("–û–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", self.update_blacklist, updates_layout)
        self.update_button = self.create_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self.check_for_updates, updates_layout)
        settings_layout.addWidget(updates_group)

        # –ì—Ä—É–ø–ø–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ YouTube
        sites_group = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∞–π—Ç—ã YouTube")
        sites_layout = QtWidgets.QVBoxLayout()
        sites_group.setLayout(sites_layout)
        sites_widget = self.create_sites_list(DISPLAY_NAMES)
        sites_layout.addWidget(sites_widget)
        self.check_sites_button = PushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", self)
        self.check_sites_button.clicked.connect(self.check_sites_status)
        sites_layout.addWidget(self.check_sites_button)
        settings_layout.addWidget(sites_group)

        settings_layout.addStretch(1)

        return settings_tab

    def create_info_tab(self):
        info_tab = QtWidgets.QWidget()
        info_layout = QtWidgets.QVBoxLayout(info_tab)

        # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
        details_group = self.create_details_group()
        info_layout.addWidget(details_group)

        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        acknowledgements_group = self.create_acknowledgements_group()
        info_layout.addWidget(acknowledgements_group)

        info_layout.addStretch(1)
        return info_tab

    def create_details_group(self):
        group = QGroupBox("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")
        layout = QtWidgets.QGridLayout(group)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        labels = {
            "–í–µ—Ä—Å–∏—è": f"v{CURRENT_VERSION}",
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": "Zhivem",
            "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub": "<a href='https://github.com/zhivem/DPI-Penguin'>DPI Penguin</a>",
            "–í–µ—Ä—Å–∏–∏": "<a href='https://github.com/zhivem/DPI-Penguin/releases'>Releases</a>",
            "–õ–∏—Ü–µ–Ω–∑–∏—è": "¬© 2024 Zhivem. License: Apache License, Version 2.0."
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        widgets = {
            "–í–µ—Ä—Å–∏—è": QtWidgets.QLabel(labels["–í–µ—Ä—Å–∏—è"]),
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": QtWidgets.QLabel(labels["–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"]),
            "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub": QtWidgets.QLabel(labels["–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub"]),
            "–í–µ—Ä—Å–∏–∏": QtWidgets.QLabel(labels["–í–µ—Ä—Å–∏–∏"]),
            "–õ–∏—Ü–µ–Ω–∑–∏—è": QtWidgets.QLabel(labels["–õ–∏—Ü–µ–Ω–∑–∏—è"])
        }

        for row, (key, widget) in enumerate(widgets.items()):
            if key in ["–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub", "–í–µ—Ä—Å–∏–∏"]:
                widget.setOpenExternalLinks(True)
            layout.addWidget(QtWidgets.QLabel(key), row, 0)
            layout.addWidget(widget, row, 1)

        return group

    def create_acknowledgements_group(self):
        group = QGroupBox("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        layout = QtWidgets.QVBoxLayout(group)

        dependencies = [
            {
                "title": "GoodbyeDPI",
                "description": "–û—Å–Ω–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã YouTube",
                "version": "0.2.3rc3",
                "developer": "ValdikSS",
                "links": [
                    "https://github.com/ValdikSS/GoodbyeDPI/",
                    "https://github.com/ValdikSS/"
                ]
            },
            {
                "title": "Zapret",
                "description": "–û—Å–Ω–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã Discord –∏ YouTube",
                "version": "v.64",
                "developer": "bol-van",
                "links": [
                    "https://github.com/bol-van/zapret",
                    "https://github.com/bol-van/"
                ]
            }
        ]

        for dep in dependencies:
            section = self.create_acknowledgement_section(**dep)
            layout.addWidget(section)

        return group

    def create_acknowledgement_section(self, title, description, version, developer, links):
        section = QtWidgets.QWidget()
        layout = QtWidgets.QGridLayout(section)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        layout.addWidget(QtWidgets.QLabel(f"<b>{title}</b>"), 0, 0, 1, 2)
        layout.addWidget(QtWidgets.QLabel(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"), 1, 0, 1, 2)
        layout.addWidget(QtWidgets.QLabel(f"Version: {version}"), 2, 0)
        layout.addWidget(QtWidgets.QLabel(f"Developer: {developer}"), 2, 1)

        # –°—Å—ã–ª–∫–∏
        for i, link in enumerate(links, start=3):
            link_label = QtWidgets.QLabel(f"<a href='{link}'>{link}</a>")
            link_label.setOpenExternalLinks(True)
            layout.addWidget(link_label, i, 0, 1, 2)

        return section

    def toggle_tray_behavior(self, state):
        self.minimize_to_tray = state == Qt.Checked

    def toggle_autostart(self, state):
        if state == Qt.Checked:
            enable_autostart()
            self.logger.info("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω.")
        else:
            disable_autostart()
            self.logger.info("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")

    def create_sites_list(self, sites):
        list_widget = QListWidget()
        list_widget.setFixedHeight(150)

        self.site_status = {}
        for site in sites:
            item = QListWidgetItem(site)
            icon = self.create_status_icon('gray')
            item.setIcon(icon)
            list_widget.addItem(item)
            self.site_status[site] = item

        return list_widget

    def create_status_icon(self, color):
        pixmap = QPixmap(12, 12)
        pixmap.fill(QColor(color))
        return QIcon(pixmap)

    def create_button(self, text, func, layout, enabled=True, icon_path=None, icon_size=(24, 24), tooltip=None):
        button = PushButton(text, self)
        button.setEnabled(enabled)
        if func:
            button.clicked.connect(func)

        if icon_path:
            self.set_button_icon(button, icon_path, icon_size)

        if tooltip:
            button.setToolTip(tooltip)

        if layout is not None:
            layout.addWidget(button)
        return button

    def handle_create_service(self):
        result = create_service()
        QMessageBox.information(self, "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã", result)

    def handle_delete_service(self):
        result = delete_service()
        QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–±—ã", result)

    def run_exe(self):
        if self.config_error:
            self.console_output.append("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫.")
            return

        selected_option = self.selected_script.currentText()
        if selected_option not in self.script_options:
            self.console_output.append(f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞ {selected_option}.")
            return

        executable, args = self.script_options[selected_option]

        if not self.is_executable_available(executable, selected_option):
            return

        command = [executable] + args
        self.logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {command}")

        try:
            capture_output = selected_option not in [
                "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Discord",
                "–û–±—Ö–æ–¥ Discord + YouTube",
                "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ YouTube"
            ]
            self.start_process(
                command,
                selected_option,
                disable_run=True,
                clear_console_text=f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞: {selected_option} –∑–∞–ø—É—â–µ–Ω–∞...",
                capture_output=capture_output
            )
            self.logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å '{selected_option}' –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}", exc_info=True)
            self.console_output.append(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

    def is_executable_available(self, executable, selected_option):
        if not os.path.exists(executable):
            self.logger.error(f"–§–∞–π–ª {executable} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            self.console_output.append(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {executable} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False

        if not os.access(executable, os.X_OK):
            self.logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ {executable}.")
            self.console_output.append(f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ {executable}.")
            return False

        if selected_option in [
            "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Discord",
            "–û–±—Ö–æ–¥ Discord + YouTube",
            "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ YouTube (–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)"
        ]:
            required_files = [
                os.path.join(BASE_FOLDER, "black", BLACKLIST_FILES[2]),
                os.path.join(BASE_FOLDER, "zapret", "quic_initial_www_google_com.bin"),
                os.path.join(BASE_FOLDER, "zapret", "tls_clienthello_www_google_com.bin")
            ]
            missing_files = [f for f in required_files if not os.path.exists(f)]
            if missing_files:
                self.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
                self.console_output.append(f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
                return False

        self.logger.debug(f"–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª {executable} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return True

    def start_process(self, command, process_name, disable_run=False, clear_console_text=None, capture_output=True):
        if clear_console_text:
            self.clear_console(clear_console_text)

        try:
            self.worker_thread = WorkerThread(
                command,
                process_name,
                encoding="utf-8",
                capture_output=capture_output
            )
            if capture_output:
                self.worker_thread.output_signal.connect(self.update_output)
            self.worker_thread.finished_signal.connect(self.on_finished)

            self.worker_thread.start()

            if disable_run:
                self.run_button.setEnabled(False)
                self.stop_close_button.setEnabled(True)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}", exc_info=True)
            self.console_output.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")

    def update_output(self, text):
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        ignore_keywords = [
            "loading hostlist",
            "we have",
            "desync profile(s)",
            "loaded hosts",
            "loading plain text list",
            "loaded",  # –ú–æ–∂–Ω–æ –æ–±–æ–±—â–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "loaded"
        ]
        
        text_lower = text.lower()
        
        if "windivert initialized. capture is started." in text_lower:
            # –ï—Å–ª–∏ WinDivert –∑–∞–ø—É—â–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø—É—â–µ–Ω–æ"
            self.console_output.append("–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        elif any(keyword in text_lower for keyword in ignore_keywords):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–ª–∏ –Ω–µ–Ω—É–∂–Ω—ã–µ –ª–æ–≥–∏
            return
        else:
            # –î–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            self.console_output.append(text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
        max_lines = 100
        document = self.console_output.document()
        while document.blockCount() > max_lines:
            cursor = self.console_output.textCursor()
            cursor.movePosition(QtGui.QTextCursor.Start)
            cursor.select(QtGui.QTextCursor.BlockUnderCursor)
            cursor.removeSelectedText()
            cursor.deleteChar()

    def on_finished(self, process_name):
        if process_name in self.script_options:
            self.run_button.setEnabled(True)
            self.stop_close_button.setEnabled(False)
            self.logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –∑–∞–≤–µ—Ä—à—ë–Ω.")

    def stop_and_close(self):
        self.logger.info("–ù–∞—á–∞—Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")
        self.start_process(WIN_DIVERT_COMMAND, "WinDivert", capture_output=False)
        self.close_process(GOODBYE_DPI_PROCESS_NAME, "GoodbyeDPI")
        self.close_process("winws.exe", "winws.exe")

    def close_process(self, process_name, display_name):
        try:
            for proc in psutil.process_iter(['pid', 'name']):
                if proc.info['name'].lower() == process_name.lower():
                    psutil.Process(proc.info['pid']).terminate()
                    self.console_output.append(f"–û–±—Ö–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    self.logger.debug(f"–ü—Ä–æ—Ü–µ—Å—Å {display_name} (PID: {proc.info['pid']}) –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except psutil.NoSuchProcess:
            self.logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {display_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except psutil.AccessDenied:
            self.logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {display_name}.")
            self.console_output.append(f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {display_name}.")
        except Exception as e:
            self.console_output.append(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {display_name}: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {display_name}: {str(e)}")

    def update_blacklist(self):
        self.logger.debug("–ù–∞—á–∞—Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        self.updater.blacklist_updated.connect(self.on_blacklist_updated)
        self.updater.update_error.connect(self.on_update_error)
        self.updater.update_blacklist()

    def check_for_updates(self):
        self.update_button.setEnabled(False)
        self.updater.update_available.connect(self.notify_update)
        self.updater.no_update.connect(self.no_update)
        self.updater.update_error.connect(self.on_update_error)
        self.updater.finished.connect(self.on_update_finished)
        self.updater.start()

    def no_update(self):
        QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    def on_update_finished(self):
        self.update_button.setEnabled(True)

    def on_blacklist_updated(self):
        QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.")

    def on_update_error(self, error_message):
        self.console_output.append(error_message)
        QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", error_message)

    def notify_update(self, latest_version):
        self.logger.info(f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {latest_version}")
        QMessageBox.information(
            self,
            "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            f'–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {latest_version}. <a href="https://github.com/zhivem/DPI-Penguin/releases">–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏</a>.',
            QMessageBox.Ok
        )

    def clear_console(self, initial_text=""):
        self.console_output.clear()
        if initial_text:
            self.console_output.append(initial_text)

    def check_sites_status(self):
        self.check_sites_button.setEnabled(False)
        self.logger.debug("–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤.")

        self.site_checker_thread = QtCore.QThread()
        self.site_checker_worker = SiteCheckerWorker(self.site_status.keys())
        self.site_checker_worker.moveToThread(self.site_checker_thread)

        self.site_checker_thread.started.connect(self.site_checker_worker.run)
        self.site_checker_worker.site_checked.connect(self.update_site_status)
        self.site_checker_worker.finished.connect(self.sites_check_finished)
        self.site_checker_worker.finished.connect(self.site_checker_thread.quit)
        self.site_checker_worker.finished.connect(self.site_checker_worker.deleteLater)
        self.site_checker_thread.finished.connect(self.site_checker_thread.deleteLater)

        self.site_checker_thread.start()

    @pyqtSlot(str, str)
    def update_site_status(self, site, color):
        if site in self.site_status:
            icon = self.create_status_icon(color)
            self.site_status[site].setIcon(icon)
            self.logger.debug(f"–°–∞–π—Ç {site} –¥–æ—Å—Ç—É–ø–µ–Ω: {color}")

    @pyqtSlot()
    def finish_check_sites(self):
        self.check_sites_button.setEnabled(True)
        self.logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def open_path(self, path):
        if not os.path.exists(path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            return

        try:
            if platform.system() == "Windows":
                os.startfile(path)
            elif platform.system() == "Darwin":  # macOS
                subprocess.Popen(["open", path])
            else:  # Linux –∏ –¥—Ä—É–≥–∏–µ
                subprocess.Popen(["xdg-open", path])
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—É—Ç–∏ {path}: {e}", exc_info=True)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å: {e}")

    def open_logs_folder(self):
        self.open_path(os.path.join(BASE_FOLDER, "logs"))

    def open_config_file(self):
        self.open_path(os.path.join(BASE_FOLDER, "config"))

    def load_config_via_dialog(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫.
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π default.ini.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
        """
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            "",
            "INI Files (*.ini)",
            options=options
        )
        if file_path:
            self.logger.info(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {file_path}")
            validation_error = self.validate_config_file(file_path)
            if validation_error:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º –≤—ã–≤–æ–¥–µ –∏ –≤ –¥–∏–∞–ª–æ–≥–µ
                self.console_output.append(validation_error)
                self.logger.error(validation_error)
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", validation_error)
                return

            # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            new_script_options, new_config_error = load_script_options(file_path)

            if new_config_error:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º –≤—ã–≤–æ–¥–µ –∏ –≤ –¥–∏–∞–ª–æ–≥–µ
                self.console_output.append(new_config_error)
                self.logger.error(new_config_error)
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", new_config_error)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
            self.script_options = new_script_options
            self.config_error = None
            self.current_config_path = file_path  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É
            self.console_output.append("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å: –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            self.selected_script.clear()
            self.selected_script.addItems(self.script_options.keys())
            self.selected_script.setEnabled(True)
            self.run_button.setEnabled(True)
            self.stop_close_button.setEnabled(False)

    def validate_config_file(self, file_path):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ default.ini.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        - –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å INI —Ñ–æ—Ä–º–∞—Ç–∞
        - –ù–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –∏ –∫–ª—é—á–µ–π
        """
        if not os.path.exists(file_path):
            return f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"

        if not os.access(file_path, os.R_OK):
            return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_path}"

        config = configparser.ConfigParser()
        try:
            config.read(file_path, encoding='utf-8')
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ INI: {e}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        if 'SCRIPT_OPTIONS' not in config.sections():
            return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [SCRIPT_OPTIONS] –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –æ–ø—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        script_sections = [section for section in config.sections() if section != 'SCRIPT_OPTIONS']
        if not script_sections:
            return "–û—à–∏–±–∫–∞: –í —Å–µ–∫—Ü–∏–∏ [SCRIPT_OPTIONS] –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        required_keys = ['executable', 'args']
        for section in script_sections:
            for key in required_keys:
                if key not in config[section]:
                    return f"–û—à–∏–±–∫–∞: –í —Å–µ–∫—Ü–∏–∏ [{section}] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}'."

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ–ø–∏—à—É –ø–æ—Ç–æ–º

        return None
