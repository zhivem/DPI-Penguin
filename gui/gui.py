# gui.py

import logging
import os
import configparser

import psutil
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import pyqtSlot
from PyQt6.QtGui import QIcon, QAction
from PyQt6.QtWidgets import (
    QCheckBox,
    QGroupBox,
    QMenu,
    QSystemTrayIcon,
    QMessageBox,
    QFileDialog,
)
from qfluentwidgets import ComboBox as QFComboBox, PushButton, TextEdit

from workers.process_worker import WorkerThread
from utils.utils import (
    BASE_FOLDER,
    WIN_DIVERT_COMMAND,
    CURRENT_VERSION,
    create_service,
    delete_service,
    disable_autostart,
    enable_autostart,
    is_autostart_enabled,
    load_script_options,
    open_path,
    tr,
    set_language,
    translation_manager,
    settings,
)
import utils.theme_utils

from gui.updater_manager import SettingsDialog
from utils.update_checker import UpdateChecker  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UpdateChecker

TRAY_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "newicon.ico")
THEME_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "themes.png")
LOG_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "log.png")
INI_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "ini.png")
MANAGER_ICON_PATH = os.path.join(BASE_FOLDER, "resources", "icon", "manager.png")

class GoodbyeDPIApp(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(self.__class__.__name__)

        self.ensure_logs_folder_exists()

        self.minimize_to_tray = settings.value("minimize_to_tray", True, type=bool)
        self.autostart_enabled = is_autostart_enabled()
        self.autorun_with_last_config = settings.value("autorun_with_last_config", False, type=bool)

        if self.autorun_with_last_config:
            last_config_path = settings.value("last_config_path", os.path.join(BASE_FOLDER, "config", "default.ini"))
            self.script_options, self.config_error = load_script_options(last_config_path)
            self.current_config_path = last_config_path
        else:
            default_config_path = os.path.join(BASE_FOLDER, "config", "default.ini")
            self.script_options, self.config_error = load_script_options(default_config_path)
            self.current_config_path = default_config_path

        self.worker_thread = None

        self.init_ui()

        self.init_tray_icon()

        if self.config_error:
            self.console_output.append(self.config_error)
            self.logger.error(self.config_error)
            self.selected_script.setEnabled(False)
            self.run_button.setEnabled(False)
            self.stop_close_button.setEnabled(False)
            self.update_config_button.setEnabled(True)

        if settings.value("update_blacklists_on_start", False, type=bool):
            self.update_blacklists(silent=True)

        self.check_updates()

        if self.autorun_with_last_config and not self.config_error:
            last_selected_script = settings.value("last_selected_script", None)
            if last_selected_script and last_selected_script in self.script_options:
                index = self.selected_script.findData(last_selected_script)
                if index >= 0:
                    self.selected_script.setCurrentIndex(index)
            else:
                if self.selected_script.count() > 0:
                    self.selected_script.setCurrentIndex(0)

            self.logger.info(tr("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞..."))
            self.run_exe(auto_run=True)
            self.hide()
            self.tray_icon.show()
            self.tray_icon.showMessage(
                tr("DPI Penguin by Zhivem"),
                tr("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"),
                QSystemTrayIcon.MessageIcon.Information,
                3000
            )
        else:
            self.show()

    def ensure_logs_folder_exists(self):
        logs_folder = os.path.join(BASE_FOLDER, "logs")
        if not os.path.exists(logs_folder):
            try:
                os.makedirs(logs_folder)
                self.logger.info(f"{tr('–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ logs')}: {logs_folder}")
            except Exception as e:
                self.logger.error(f"{tr('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É logs')}: {e}", exc_info=True)

    def init_ui(self):
        self.setWindowTitle(tr("DPI Penguin v{version}").format(version=CURRENT_VERSION))
        self.setFixedSize(420, 570)
        self.set_window_icon(TRAY_ICON_PATH)

        saved_theme = settings.value("theme", "light")
        utils.theme_utils.apply_theme(self, saved_theme, settings, BASE_FOLDER)

        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        layout = QtWidgets.QVBoxLayout(central_widget)
        tab_widget = self.create_tabs()
        layout.addWidget(tab_widget)

    def set_window_icon(self, icon_path):
        if not os.path.exists(icon_path):
            self.logger.error(f"{tr('–§–∞–π–ª –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω')}: {icon_path}")
        self.setWindowIcon(QIcon(icon_path))

    def init_tray_icon(self):
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(QIcon(TRAY_ICON_PATH))

        tray_menu = QMenu()

        restore_action = QAction(tr("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"), self)
        restore_action.triggered.connect(self.restore_from_tray)
        tray_menu.addAction(restore_action)

        quit_action = QAction(tr("–í—ã—Ö–æ–¥"), self)
        quit_action.triggered.connect(self.exit_app)
        tray_menu.addAction(quit_action)

        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.activated.connect(self.on_tray_icon_activated)

    def closeEvent(self, event):
        if self.minimize_to_tray:
            event.ignore()
            self.hide()
            self.tray_icon.show()
            self.tray_icon.showMessage(
                tr("DPI Penguin by Zhivem"),
                tr("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π. –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ"),
                QSystemTrayIcon.MessageIcon.Information,
                1000
            )
        else:
            self.stop_and_close()
            event.accept()

    def restore_from_tray(self):
        self.showNormal()
        self.raise_()
        self.activateWindow()
        self.tray_icon.hide()

    def on_tray_icon_activated(self, reason):
        if reason == QSystemTrayIcon.ActivationReason.Trigger:
            if self.isHidden():
                self.restore_from_tray()
            else:
                self.hide()

    def exit_app(self):
        self.stop_and_close()
        self.tray_icon.hide()
        QtWidgets.QApplication.quit()

    def create_tabs(self):
        tab_widget = QtWidgets.QTabWidget(self)
        tab_widget.addTab(self.create_process_tab(), tr("–û—Å–Ω–æ–≤–Ω–æ–µ"))
        tab_widget.addTab(self.create_settings_tab(), tr("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
        tab_widget.addTab(self.create_info_tab(), tr("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"))
        return tab_widget

    def create_process_tab(self):
        process_tab = QtWidgets.QWidget()
        process_layout = QtWidgets.QVBoxLayout(process_tab)

        script_layout = QtWidgets.QHBoxLayout()

        self.selected_script = QFComboBox()
        if not self.config_error:
            for script_name in self.script_options.keys():
                translated_name = tr(script_name)
                self.selected_script.addItem(translated_name, userData=script_name)
        self.selected_script.setSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        script_layout.addWidget(self.selected_script)

        self.update_config_button = PushButton("üìÅ", self)
        self.update_config_button.setToolTip(tr("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"))
        self.update_config_button.clicked.connect(self.load_config_via_dialog)
        self.update_config_button.setSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        self.update_config_button.setFixedWidth(40)
        script_layout.addWidget(self.update_config_button)

        script_layout.setStretch(0, 1)
        script_layout.setStretch(1, 0)

        process_layout.addLayout(script_layout)

        buttons_layout = QtWidgets.QHBoxLayout()
        self.run_button = self.create_button(tr("–ó–∞–ø—É—Å—Ç–∏—Ç—å"), self.run_exe, buttons_layout)
        self.stop_close_button = self.create_button(
            tr("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å"),
            self.stop_and_close,
            buttons_layout,
            enabled=False
        )
        process_layout.addLayout(buttons_layout)

        self.console_output = TextEdit(self)
        self.console_output.setReadOnly(True)
        process_layout.addWidget(self.console_output)

        log_and_config_layout = QtWidgets.QHBoxLayout()

        self.open_logs_button = self.create_button(
            text=tr("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É Log"),
            func=lambda: self.handle_open_path(os.path.join(BASE_FOLDER, "logs")),
            layout=log_and_config_layout,
            icon_path=LOG_ICON_PATH,
            icon_size=(16, 16),
        )

        self.open_config_button = self.create_button(
            text=tr("–û—Ç–∫—Ä—ã—Ç—å configs"),
            func=lambda: self.handle_open_path(os.path.join(BASE_FOLDER, "config")),
            layout=log_and_config_layout,
            icon_path=INI_ICON_PATH,
            icon_size=(16, 16),
        )

        process_layout.addLayout(log_and_config_layout)

        self.theme_toggle_button = PushButton()
        utils.theme_utils.update_theme_button_text(self, settings)
        self.set_button_icon(self.theme_toggle_button, THEME_ICON_PATH, (16, 16))
        self.theme_toggle_button.clicked.connect(self.toggle_theme_button_clicked)
        process_layout.addWidget(self.theme_toggle_button)

        return process_tab

    def handle_open_path(self, path: str):
        error = open_path(path)
        if error:
            QMessageBox.warning(self, tr("–û—à–∏–±–∫–∞"), error)

    def set_button_icon(self, button, icon_path, icon_size):
        if not os.path.exists(icon_path):
            self.logger.error(f"{tr('–§–∞–π–ª –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω')}: {icon_path}")
        else:
            icon = QIcon(icon_path)
            button.setIcon(icon)
            button.setIconSize(QtCore.QSize(*icon_size))

    def toggle_theme_button_clicked(self):
        utils.theme_utils.toggle_theme(self, settings, BASE_FOLDER)

    def create_settings_tab(self):
        settings_tab = QtWidgets.QWidget()
        settings_layout = QtWidgets.QVBoxLayout(settings_tab)

        self.language_group = QGroupBox(tr("–Ø–∑—ã–∫ / Language"))
        language_layout = QtWidgets.QVBoxLayout()
        self.language_group.setLayout(language_layout)

        self.language_combo = QFComboBox()
        for lang_code in translation_manager.available_languages:
            lang_name = translation_manager.language_names.get(lang_code, lang_code)
            self.language_combo.addItem(lang_name, userData=lang_code)

        current_lang_code = translation_manager.current_language
        current_index = self.language_combo.findData(current_lang_code)
        if current_index >= 0:
            self.language_combo.setCurrentIndex(current_index)

        self.language_combo.currentIndexChanged.connect(self.change_language)
        language_layout.addWidget(self.language_combo)
        settings_layout.addWidget(self.language_group)

        self.autostart_group = QGroupBox(tr("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫"))
        autostart_layout = QtWidgets.QVBoxLayout()
        self.autostart_group.setLayout(autostart_layout)

        self.tray_checkbox = QCheckBox(tr("–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"))
        self.tray_checkbox.setChecked(self.minimize_to_tray)
        self.tray_checkbox.toggled.connect(self.toggle_tray_behavior)
        autostart_layout.addWidget(self.tray_checkbox)

        self.autostart_checkbox = QCheckBox(tr("–ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã"))
        self.autostart_checkbox.setChecked(self.autostart_enabled)
        self.autostart_checkbox.toggled.connect(self.toggle_autostart)
        autostart_layout.addWidget(self.autostart_checkbox)

        self.autorun_with_last_config_checkbox = QCheckBox(tr("–ó–∞–ø—É—Å–∫–∞—Ç—å –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ"))
        self.autorun_with_last_config_checkbox.setChecked(self.autorun_with_last_config)
        self.autorun_with_last_config_checkbox.toggled.connect(self.toggle_autorun_with_last_config)
        autostart_layout.addWidget(self.autorun_with_last_config_checkbox)

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å "–û–±–Ω–æ–≤–ª—è—Ç—å —á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã" –≤ –≥—Ä—É–ø–ø—É "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫"
        self.update_blacklists_on_start_checkbox = QCheckBox(tr("–ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"))
        self.update_blacklists_on_start_checkbox.setChecked(settings.value("update_blacklists_on_start", False, type=bool))
        self.update_blacklists_on_start_checkbox.toggled.connect(self.toggle_update_blacklists_on_start)
        autostart_layout.addWidget(self.update_blacklists_on_start_checkbox)

        font = self.tray_checkbox.font()
        font.setPointSize(9)
        self.tray_checkbox.setFont(font)
        self.autostart_checkbox.setFont(font)
        self.autorun_with_last_config_checkbox.setFont(font)
        self.update_blacklists_on_start_checkbox.setFont(font)

        settings_layout.addWidget(self.autostart_group)

        self.services_group = QGroupBox(tr("–°–ª—É–∂–±—ã"))
        services_layout = QtWidgets.QVBoxLayout()
        self.services_group.setLayout(services_layout)

        self.create_service_button = self.create_button(tr("–°–æ–∑–¥–∞—Ç—å —Å–ª—É–∂–±—É"), self.handle_create_service, services_layout)
        self.delete_service_button = self.create_button(tr("–£–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–±—É"), self.handle_delete_service, services_layout)

        services_layout.addWidget(self.create_service_button)
        services_layout.addWidget(self.delete_service_button)

        settings_layout.addWidget(self.services_group)

        self.updates_group = QGroupBox(tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
        updates_layout = QtWidgets.QVBoxLayout()
        self.updates_group.setLayout(updates_layout)

        self.open_additional_settings_button = self.create_button(
            text=tr("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫"),
            func=self.open_settings_dialog,
            layout=updates_layout,
            icon_path=MANAGER_ICON_PATH,
            icon_size=(18, 18)
        )

        # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏"
        self.update_blacklists_button = self.create_button(
            text=tr("–û–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏"),
            func=lambda: self.update_blacklists(silent=False),
            layout=updates_layout
        )

        updates_layout.addWidget(self.open_additional_settings_button)
        updates_layout.addWidget(self.update_blacklists_button)

        settings_layout.addWidget(self.updates_group)

        settings_layout.addStretch(1)

        return settings_tab

    def change_language(self):
        lang_code = self.language_combo.currentData()
        set_language(lang_code)
        settings.setValue("language", lang_code)
        self.update_ui_texts()

    def update_ui_texts(self):
        self.setWindowTitle(tr("DPI Penguin v{version}").format(version=CURRENT_VERSION))
        tab_widget = self.centralWidget().layout().itemAt(0).widget()
        tab_widget.setTabText(0, tr("–û—Å–Ω–æ–≤–Ω–æ–µ"))
        tab_widget.setTabText(1, tr("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
        tab_widget.setTabText(2, tr("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"))

        self.run_button.setText(tr("–ó–∞–ø—É—Å—Ç–∏—Ç—å"))
        self.stop_close_button.setText(tr("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å"))
        self.update_config_button.setToolTip(tr("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"))
        self.open_logs_button.setText(tr("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É Log"))
        self.open_config_button.setText(tr("–û—Ç–∫—Ä—ã—Ç—å configs"))
        utils.theme_utils.update_theme_button_text(self, settings)

        self.tray_checkbox.setText(tr("–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"))
        self.autostart_checkbox.setText(tr("–ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã"))
        self.autorun_with_last_config_checkbox.setText(tr("–ó–∞–ø—É—Å–∫–∞—Ç—å –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ"))
        self.update_blacklists_on_start_checkbox.setText(tr("–ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"))
        self.create_service_button.setText(tr("–°–æ–∑–¥–∞—Ç—å —Å–ª—É–∂–±—É"))
        self.delete_service_button.setText(tr("–£–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–±—É"))
        self.open_additional_settings_button.setText(tr("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫"))
        self.update_blacklists_button.setText(tr("–û–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏"))

        self.language_group.setTitle(tr("–Ø–∑—ã–∫ / Language"))
        self.autostart_group.setTitle(tr("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫"))
        self.services_group.setTitle(tr("–°–ª—É–∂–±—ã"))
        self.updates_group.setTitle(tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"))

        for index in range(self.language_combo.count()):
            lang_code = self.language_combo.itemData(index)
            lang_name = translation_manager.language_names.get(lang_code, lang_code)
            self.language_combo.setItemText(index, lang_name)

        self.details_group.setTitle(tr("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"))
        self.acknowledgements_group.setTitle(tr("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"))
        self.update_info_tab_texts()

        self.update_script_options_display()

    def update_script_options_display(self):
        current_data = self.selected_script.currentData()
        self.selected_script.clear()
        for script_name in self.script_options.keys():
            translated_name = tr(script_name)
            self.selected_script.addItem(translated_name, userData=script_name)
        if current_data:
            index = self.selected_script.findData(current_data)
            if index >= 0:
                self.selected_script.setCurrentIndex(index)

    def create_info_tab(self):
        info_tab = QtWidgets.QWidget()
        info_layout = QtWidgets.QVBoxLayout(info_tab)

        self.details_group = self.create_details_group()
        info_layout.addWidget(self.details_group)

        self.acknowledgements_group = self.create_acknowledgements_group()
        info_layout.addWidget(self.acknowledgements_group)

        info_layout.addStretch(1)
        return info_tab

    def update_info_tab_texts(self):
        self.details_group.setTitle(tr("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"))
        self.acknowledgements_group.setTitle(tr("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"))

    def create_details_group(self):
        group = QGroupBox(tr("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"))
        layout = QtWidgets.QGridLayout(group)

        labels = {
            tr("–í–µ—Ä—Å–∏—è"): f"{CURRENT_VERSION}",
            tr("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"): "Zhivem",
            tr("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub"): f"<a href='https://github.com/zhivem/DPI-Penguin'>{tr('DPI Penguin')}</a>",
            tr("–†–µ–ª–∏–∑—ã"): f"<a href='https://github.com/zhivem/DPI-Penguin/releases'>{tr('–†–µ–ª–∏–∑—ã')}</a>",
            tr("–õ–∏—Ü–µ–Ω–∑–∏—è"): tr("¬© 2024 Zhivem. –õ–∏—Ü–µ–Ω–∑–∏—è: Apache")
        }

        widgets = {
            tr("–í–µ—Ä—Å–∏—è"): QtWidgets.QLabel(labels[tr("–í–µ—Ä—Å–∏—è")]),
            tr("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"): QtWidgets.QLabel(labels[tr("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")]),
            tr("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub"): QtWidgets.QLabel(labels[tr("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")]),
            tr("–†–µ–ª–∏–∑—ã"): QtWidgets.QLabel(labels[tr("–†–µ–ª–∏–∑—ã")]),
            tr("–õ–∏—Ü–µ–Ω–∑–∏—è"): QtWidgets.QLabel(labels[tr("–õ–∏—Ü–µ–Ω–∑–∏—è")])
        }

        for row, (key, widget) in enumerate(widgets.items()):
            if key in [tr("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub"), tr("–†–µ–ª–∏–∑—ã")]:
                widget.setOpenExternalLinks(True)
            layout.addWidget(QtWidgets.QLabel(key), row, 0)
            layout.addWidget(widget, row, 1)

        return group

    def create_acknowledgements_group(self):
        group = QGroupBox(tr("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"))
        layout = QtWidgets.QVBoxLayout(group)

        dependencies = [
            {
                "title": "Discord Fix [howdyho]",
                "description": tr("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
                "version": "5.8",
                "developer": "–ê–±—Ä–∞—Ö–∞–º",
                "links": [
                    "https://howdyho.net",
                    "https://vk.com/howdyho_net"
                ]
            },
            {
                "title": "Zapret",
                "description": tr("–û—Å–Ω–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã Discord –∏ YouTube"),
                "version": "67",
                "developer": "bol-van",
                "links": [
                    "https://github.com/bol-van/zapret",
                    "https://github.com/bol-van/"
                ]
            }
        ]

        for dep in dependencies:
            section = self.create_acknowledgement_section(**dep)
            layout.addWidget(section)

        return group

    def create_acknowledgement_section(self, title, description, version, developer, links):
        section = QtWidgets.QWidget()
        layout = QtWidgets.QGridLayout(section)

        layout.addWidget(QtWidgets.QLabel(f"<b>{title}</b>"), 0, 0, 1, 2)
        layout.addWidget(QtWidgets.QLabel(f"{tr('–û–ø–∏—Å–∞–Ω–∏–µ')}: {description}"), 1, 0, 1, 2)
        layout.addWidget(QtWidgets.QLabel(f"{tr('–í–µ—Ä—Å–∏—è')}: {version}"), 2, 0)
        layout.addWidget(QtWidgets.QLabel(f"{tr('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')}: {developer}"), 2, 1)

        for i, link in enumerate(links, start=3):
            link_label = QtWidgets.QLabel(f"<a href='{link}'>{link}</a>")
            link_label.setOpenExternalLinks(True)
            layout.addWidget(link_label, i, 0, 1, 2)

        return section

    def toggle_tray_behavior(self, checked):
        self.minimize_to_tray = checked
        settings.setValue("minimize_to_tray", self.minimize_to_tray)

        if not checked and self.tray_icon.isVisible():
            self.tray_icon.hide()

    def toggle_autostart(self, checked):
        if checked:
            enable_autostart()
            self.logger.info(tr("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω"))
        else:
            disable_autostart()
            self.logger.info(tr("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω"))

    def toggle_autorun_with_last_config(self, checked):
        self.autorun_with_last_config = checked
        settings.setValue("autorun_with_last_config", self.autorun_with_last_config)
        self.logger.info(f"{tr('–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º')} {'–≤–∫–ª—é—á–µ–Ω' if checked else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        if checked:
            settings.setValue("last_config_path", self.current_config_path)

    def toggle_update_blacklists_on_start(self, checked):
        settings.setValue("update_blacklists_on_start", checked)
        self.logger.info(f"{tr('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')} {'–≤–∫–ª—é—á–µ–Ω–æ' if checked else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}")

    def create_button(self, text, func, layout, enabled=True, icon_path=None, icon_size=(24, 24), tooltip=None):
        button = PushButton(text, self)
        button.setEnabled(enabled)
        if func:
            button.clicked.connect(func)

        if icon_path:
            self.set_button_icon(button, icon_path, icon_size)

        if tooltip:
            button.setToolTip(tooltip)

        if layout is not None:
            layout.addWidget(button)
        return button

    def handle_create_service(self):
        result = create_service()
        QMessageBox.information(self, tr("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã"), result)

    def handle_delete_service(self):
        result = delete_service()
        QMessageBox.information(self, tr("–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–±—ã"), result)

    def run_exe(self, auto_run=False):
        if self.config_error:
            self.console_output.append(tr("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫"))
            self.logger.error(tr("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫"))
            return

        selected_option = self.selected_script.currentData()
        if selected_option not in self.script_options:
            error_msg = tr("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞ {option}.").format(option=selected_option)
            self.console_output.append(error_msg)
            self.logger.error(error_msg)
            return

        settings.setValue("last_selected_script", selected_option)

        executable, args = self.script_options[selected_option]

        if not self.is_executable_available(executable, selected_option):
            return

        translated_option = tr(selected_option)
        clear_console_text = tr("–£—Å—Ç–∞–Ω–æ–≤–∫–∞: {option} –∑–∞–ø—É—â–µ–Ω–∞...").format(option=translated_option)

        command = [executable] + args
        self.logger.debug(f"{tr('–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')}: {command}")

        try:
            capture_output = selected_option not in [
                "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ YouTube",
                "–û–±—Ö–æ–¥ Discord + YouTube",
                "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Discord",
                "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ß–° –†–ö–ù"
            ]
            self.start_process(
                command,
                selected_option,
                disable_run=True,
                clear_console_text=clear_console_text,
                capture_output=capture_output
            )
            self.logger.info(f"{tr('–ü—Ä–æ—Ü–µ—Å—Å')} '{selected_option}' {tr('–∑–∞–ø—É—â–µ–Ω')}")
        except Exception as e:
            error_msg = f"{tr('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞')}: {e}"
            self.logger.error(error_msg, exc_info=True)
            self.console_output.append(error_msg)

        if auto_run:
            settings.setValue("last_config_path", self.current_config_path)

    def is_executable_available(self, executable, selected_option):
        if not os.path.exists(executable):
            error_msg = f"{tr('–§–∞–π–ª')} {executable} {tr('–Ω–µ –Ω–∞–π–¥–µ–Ω')}"
            self.logger.error(error_msg)
            self.console_output.append(f"{tr('–û—à–∏–±–∫–∞')}: {tr('—Ñ–∞–π–ª')} {executable} {tr('–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
            return False

        if not os.access(executable, os.X_OK):
            error_msg = f"{tr('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')} {executable}."
            self.logger.error(error_msg)
            self.console_output.append(f"{tr('–û—à–∏–±–∫–∞')}: {tr('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')} {executable}")
            return False

        if selected_option in [
            "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ YouTube",
            "–û–±—Ö–æ–¥ Discord + YouTube",
            "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Discord",
            "–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ß–° –†–ö–ù"
        ]:
            required_files = [
                os.path.join(BASE_FOLDER, "black"),
                os.path.join(BASE_FOLDER, "zapret", "quic_initial_www_google_com.bin"),
                os.path.join(BASE_FOLDER, "zapret", "tls_clienthello_www_google_com.bin"),
                os.path.join(BASE_FOLDER, "zapret", "tls_clienthello_iana_org.bin")
            ]
            missing_files = [f for f in required_files if not os.path.exists(f)]
            if missing_files:
                error_msg = f"{tr('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã')}: {', '.join(missing_files)}"
                self.logger.error(error_msg)
                self.console_output.append(f"{tr('–û—à–∏–±–∫–∞')}: {tr('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã')}: {', '.join(missing_files)}")
                return False

        self.logger.debug(f"{tr('–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª')} {executable} {tr('–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞')}")
        return True

    def start_process(self, command, process_name, disable_run=False, clear_console_text=None, capture_output=True):
        if clear_console_text:
            self.clear_console(clear_console_text)

        try:
            if self.worker_thread is not None:
                self.worker_thread.terminate_process()
                self.worker_thread.quit()
                self.worker_thread.wait()
                self.worker_thread = None

            self.worker_thread = WorkerThread(
                command,
                process_name,
                encoding="utf-8",
                capture_output=capture_output
            )
            if capture_output:
                self.worker_thread.output_signal.connect(self.update_output)
            self.worker_thread.finished_signal.connect(self.on_finished)

            self.worker_thread.start()

            if disable_run:
                self.run_button.setEnabled(False)
                self.stop_close_button.setEnabled(True)
        except Exception as e:
            error_msg = f"{tr('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞')}: {e}"
            self.logger.error(error_msg, exc_info=True)
            self.console_output.append(error_msg)

    def update_output(self, text):
        ignore_keywords = [
            "loading hostlist",
            "we have",
            "desync profile(s)",
            "loaded hosts",
            "loading plain text list",
            "loaded",
            "loading ipset"
        ]

        text_lower = text.lower()

        if "windivert initialized. capture is started." in text_lower:
            self.console_output.append(tr("–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"))
        elif any(keyword in text_lower for keyword in ignore_keywords):
            return
        else:
            self.console_output.append(text)

        max_lines = 100
        document = self.console_output.document()
        while document.blockCount() > max_lines:
            cursor = self.console_output.textCursor()
            cursor.movePosition(QtGui.QTextCursor.MoveOperation.Start)
            cursor.select(QtGui.QTextCursor.SelectionType.BlockUnderCursor)
            cursor.removeSelectedText()
            cursor.deleteChar()

    @pyqtSlot(str)
    def on_finished(self, process_name):
        if process_name in self.script_options:
            self.run_button.setEnabled(True)
            self.stop_close_button.setEnabled(False)
            self.logger.info(f"{tr('–ü—Ä–æ—Ü–µ—Å—Å')} {process_name} {tr('–∑–∞–≤–µ—Ä—à—ë–Ω')}")
            self.console_output.append(tr("–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω"))

            if self.worker_thread:
                try:
                    self.worker_thread.output_signal.disconnect(self.update_output)
                except TypeError:
                    pass
                try:
                    self.worker_thread.finished_signal.disconnect(self.on_finished)
                except TypeError:
                    pass

            self.worker_thread = None

    def stop_and_close(self):
        self.logger.info(tr("–ù–∞—á–∞—Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"))

        if self.worker_thread is not None:
            self.logger.info(tr("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã WorkerThread"))
            self.worker_thread.terminate_process()
            self.worker_thread.quit()
            if not self.worker_thread.wait(5000):
                self.logger.warning(tr("WorkerThread –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º"))
                self.worker_thread.terminate()
                self.worker_thread.wait()
            self.worker_thread = None

        self.start_process(
            WIN_DIVERT_COMMAND,
            "WinDivert",
            capture_output=False
        )
        self.close_process("winws.exe", "winws.exe")

    def close_process(self, process_name, display_name):
        try:
            for proc in psutil.process_iter(['pid', 'name']):
                if proc.info['name'].lower() == process_name.lower():
                    psutil.Process(proc.info['pid']).terminate()
                    self.console_output.append(tr("–û–±—Ö–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
                    self.logger.debug(f"{tr('–ü—Ä–æ—Ü–µ—Å—Å')} {display_name} (PID: {proc.info['pid']}) {tr('–∑–∞–≤–µ—Ä—à—ë–Ω')}")
        except psutil.NoSuchProcess:
            self.logger.warning(f"{tr('–ü—Ä–æ—Ü–µ—Å—Å')} {display_name} {tr('–Ω–µ –Ω–∞–π–¥–µ–Ω.')}")
        except psutil.AccessDenied:
            error_msg = f"{tr('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞')} {display_name}"
            self.logger.error(error_msg)
            self.console_output.append(f"{tr('–û—à–∏–±–∫–∞')}: {tr('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞')} {display_name}")
        except Exception as e:
            error_msg = f"{tr('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞')} {display_name}: {str(e)}"
            self.console_output.append(error_msg)
            self.logger.error(error_msg)

    def clear_console(self, initial_text=""):
        self.console_output.clear()
        if initial_text:
            self.console_output.append(initial_text)

    def load_config_via_dialog(self):
        dialog = QFileDialog(self)
        dialog.setOption(QFileDialog.Option.ReadOnly, True)

        file_path, _ = dialog.getOpenFileName(
            self,
            tr("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
            "",
            "INI Files (*.ini)"
        )

        if file_path:
            self.logger.info(f"{tr('–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')}: {file_path}")

            if self.worker_thread is not None:
                self.logger.info(tr("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã WorkerThread –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"))
                self.worker_thread.terminate_process()
                self.worker_thread.quit()
                self.worker_thread.wait()
                self.worker_thread = None

            validation_error = self.validate_config_file(file_path)
            if validation_error:
                self.console_output.append(validation_error)
                self.logger.error(validation_error)
                QMessageBox.critical(self, tr("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"), validation_error)
                return

            new_script_options, new_config_error = load_script_options(file_path)

            if new_config_error:
                self.console_output.append(new_config_error)
                self.logger.error(new_config_error)
                QMessageBox.critical(self, tr("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"), new_config_error)
                return

            self.script_options = new_script_options
            self.config_error = None
            self.current_config_path = file_path
            self.console_output.append(tr("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"))
            self.logger.info(tr("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"))

            self.update_script_options_display()
            self.selected_script.setEnabled(True)
            self.run_button.setEnabled(True)
            self.stop_close_button.setEnabled(False)

            if self.autorun_with_last_config:
                settings.setValue("last_config_path", file_path)

    def validate_config_file(self, file_path):
        if not os.path.exists(file_path):
            error_msg = f"{tr('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')}: {file_path}"
            self.logger.error(error_msg)
            return error_msg

        if not os.access(file_path, os.R_OK):
            error_msg = f"{tr('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞')}: {file_path}"
            self.logger.error(error_msg)
            return error_msg

        config = configparser.ConfigParser()
        try:
            config.read(file_path, encoding='utf-8')
        except Exception as e:
            error_msg = f"{tr('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ INI')}: {e}"
            self.logger.error(error_msg)
            return error_msg

        if 'SCRIPT_OPTIONS' not in config.sections():
            error_msg = tr("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [SCRIPT_OPTIONS] –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ")
            self.logger.error(error_msg)
            return error_msg

        script_sections = [section for section in config.sections() if section != 'SCRIPT_OPTIONS']
        if not script_sections:
            error_msg = tr("–û—à–∏–±–∫–∞: –í —Å–µ–∫—Ü–∏–∏ [SCRIPT_OPTIONS] –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤")
            self.logger.error(error_msg)
            return error_msg

        required_keys = ['executable', 'args']
        for section in script_sections:
            for key in required_keys:
                if key not in config[section]:
                    error_msg = f"{tr('–û—à–∏–±–∫–∞')}: {tr('–í —Å–µ–∫—Ü–∏–∏')} [{section}] {tr('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á')} '{key}'"
                    self.logger.error(error_msg)
                    return error_msg

        return None

    def open_settings_dialog(self):
        dialog = SettingsDialog(self)
        dialog.config_updated_signal.connect(self.reload_configuration)
        dialog.exec()

    def reload_configuration(self):
        self.logger.info(tr("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è default.ini"))
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        self.script_options, self.config_error = load_script_options(self.current_config_path)
        if self.config_error:
            self.console_output.append(self.config_error)
            self.logger.error(self.config_error)
            self.selected_script.setEnabled(False)
            self.run_button.setEnabled(False)
        else:
            self.update_script_options_display()
            self.selected_script.setEnabled(True)
            self.run_button.setEnabled(True)
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        QMessageBox.information(self, tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"), tr("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞"))

    def check_updates(self):
        self.logger.info(tr("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."))
        update_checker = UpdateChecker()
        update_checker.get_local_versions()
        update_checker.get_remote_versions()

        updates_available = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if update_checker.is_update_available('ver_programm'):
            updates_available = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è zapret
        if update_checker.is_update_available('zapret'):
            updates_available = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config (default.ini)
        if update_checker.is_update_available('config'):
            updates_available = True

        if updates_available:
            QMessageBox.information(
                self,
                tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"),
                tr("–î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å"),
                QMessageBox.StandardButton.Ok
            )
            self.open_settings_dialog()
        else:
            self.logger.info(tr("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏."))

    def update_blacklists(self, silent=False):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —á–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏.
        –ï—Å–ª–∏ silent=True, —Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–∞.
        """
        update_checker = UpdateChecker()
        success = update_checker.update_blacklists()
        if success:
            if not silent:
                QMessageBox.information(self, tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"), tr("–ß–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"))
            self.logger.info(tr("–ß–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"))
        else:
            if not silent:
                QMessageBox.warning(self, tr("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"), tr("–ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."))
            self.logger.warning(tr("–ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤"))
